package edu.nmc.bupt;

public class Dijkstra {
	public static int[] dijkstraPathArray(double[][] weight1, int start, int end) {
		double[][] weight = new double[weight1.length][weight1[0].length];
		for(int i=0;i<weight1.length;i++){
			for(int j=0;j<weight1[0].length;j++){
				weight[i][j]=weight1[i][j];
			}
		}
		// 接受一个有向图的权重矩阵，和一个起点编号start（从0编号，顶点存在数组中）
		// 返回一个int[] 数组，表示从start到它的最短路径长度
		int n = weight.length; // 顶点个数
		int[] shortPath = new int[n]; // 保存start到其他各点的最短路径
		String[] path = new String[n]; // 保存start到其他各点最短路径的字符串表示
		for (int i = 0; i < n; i++)
			path[i] = new String(start + "-->" + i);
		int[] visited = new int[n]; // 标记当前该顶点的最短路径是否已经求出,1表示已求出
		// 初始化，第一个顶点已经求出
		shortPath[start] = 0;
		visited[start] = 1;
		for (int count = 1; count < n; count++) { // 要加入n-1个顶点
			int k = -1; // 选出一个距离初始顶点start最近的未标记顶点
			double dmin = Double.MAX_VALUE;
			for (int i = 0; i < n; i++) {
				if (visited[i] == 0 && weight[start][i] < dmin) {
					dmin = weight[start][i];
					k = i;
				}
			}
			// 将新选出的顶点标记为已求出最短路径，且到start的最短路径就是dmin
			shortPath[k] = (int)dmin;
			visited[k] = 1;
			// 以k为中间点，修正从start到未访问各点的距离
			for (int i = 0; i < n; i++) {
				if (visited[i] == 0 && weight[start][k] + weight[k][i] < weight[start][i]) {
					weight[start][i] = weight[start][k] + weight[k][i];
					path[i] = path[k] + "-->" + i;
				}
			}
		}
		// 将路径信息转换为整型数组
		String[] pathStr = path[end].split("-->");
		int[] pathArray = new int[pathStr.length];
		for (int i = 0; i < pathStr.length; i++) {
			pathArray[i] = Integer.parseInt(pathStr[i]);
		}
		System.out.println("从" + start + "出发到" + end + "的最短路径为：" + path[end]);
		return pathArray;
	}

	public static int dijkstraPathDelay(int[][] weight1, int start, int end) {
		double[][] weight = new double[weight1.length][weight1[0].length];
		for(int i=0;i<weight1.length;i++){
			for(int j=0;j<weight1[0].length;j++){
				weight[i][j]=weight1[i][j];
			}
		}		
		// 接受一个有向图的权重矩阵，和一个起点编号start（从0编号，顶点存在数组中）
		// 返回一个int[] 数组，表示从start到它的最短路径长度
		int n = weight.length; // 顶点个数
		int[] shortPath = new int[n]; // 保存start到其他各点的最短路径
		String[] path = new String[n]; // 保存start到其他各点最短路径的字符串表示
		for (int i = 0; i < n; i++)
			path[i] = new String(start + "-->" + i);
		int[] visited = new int[n]; // 标记当前该顶点的最短路径是否已经求出,1表示已求出
		// 初始化，第一个顶点已经求出
		shortPath[start] = 0;
		visited[start] = 1;
		for (int count = 1; count < n; count++) { // 要加入n-1个顶点
			int k = -1; // 选出一个距离初始顶点start最近的未标记顶点
			double dmin = Double.MAX_VALUE;
			for (int i = 0; i < n; i++) {
				if (visited[i] == 0 && weight[start][i] < dmin) {
					dmin = weight[start][i];
					k = i;
				}
			}
			// 将新选出的顶点标记为已求出最短路径，且到start的最短路径就是dmin
			shortPath[k] = (int) dmin;
			visited[k] = 1;
			// 以k为中间点，修正从start到未访问各点的距离
			for (int i = 0; i < n; i++) {
				if (visited[i] == 0 && weight[start][k] + weight[k][i] < weight[start][i]) {
					weight[start][i] = weight[start][k] + weight[k][i];
					path[i] = path[k] + "-->" + i;
				}
			}
		}
		// 将路径信息转换为整型数组
		String[] pathStr = path[end].split("-->");
		int[] pathArray = new int[pathStr.length];
		for (int i = 0; i < pathStr.length; i++) {
			pathArray[i] = Integer.parseInt(pathStr[i]);
		}
		System.out.println("从" + start + "出发到" + end + "的最短跳数为：" + shortPath[end]);
		return shortPath[end];
	}
}